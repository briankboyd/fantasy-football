{
  "name": "emberfire",
  "description": "The officially supported Ember binding for Firebase",
  "version": "1.1.3",
  "author": {
    "name": "Firebase",
    "email": "support@firebase.com",
    "url": "https://www.firebase.com/"
  },
  "homepage": "https://github.com/firebase/emberfire/",
  "repository": {
    "type": "git",
    "url": "https://github.com/firebase/emberfire.git"
  },
  "bugs": {
    "url": "https://github.com/firebase/emberfire/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://firebase.mit-license.org/"
    }
  ],
  "keywords": [
    "ember",
    "firebase",
    "realtime",
    "ember-addon"
  ],
  "main": "dist/emberfire.min.js",
  "files": [
    "lib/**/*",
    "dist/**/*",
    "vendor/**/*",
    "README.md",
    "CHANGELOG.md",
    "package.json"
  ],
  "ember-addon": {
    "main": "lib/ember-cli-ember-fire.js"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-connect": "~0.7.1",
    "grunt-contrib-jshint": "~0.6.2",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-contrib-qunit": "~0.4.0",
    "grunt-exec": "~0.4.2",
    "grunt-istanbul": "~0.2.5",
    "grunt-notify": "~0.2.7",
    "grunt-mocha-phantomjs": "~0.3.1",
    "grunt-mocha-test": "~0.5.0",
    "load-grunt-config": "~0.5.0",
    "grunt-contrib-copy": "~0.5.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "readme": "# EmberFire (Firebase + Ember Data)\n\n[![Build Status](https://travis-ci.org/firebase/emberfire.svg)](https://travis-ci.org/firebase/emberfire)\n[![Version](https://badge.fury.io/gh/firebase%2Femberfire.svg)](http://badge.fury.io/gh/firebase%2Femberfire)\n\nEmberFire is the officially supported adapter for using\n[Firebase](http://www.firebase.com/?utm_medium=web&utm_source=emberfire) with\n[Ember Data](https://github.com/emberjs/data).\n\nThe `DS.FirebaseAdapter` provides all of the standard `DS.Adapter` methods and will automatically synchronize the store with Firebase.\n\nIf you would like to use Firebase without Ember Data, we recommend the third-party [ember-firebase](https://github.com/mjijackson/ember-firebase) binding.\n\n**Join the [Firebase + Ember Google Group](https://groups.google.com/forum/#!forum/firebase-ember) to ask technical questions, share apps you've built, and chat with other developers in the community.**\n\n\n## Downloading EmberFire\n\nIn order to use EmberFire in your project, you need to include the following files in your HTML:\n\n```html\n<!-- Ember + Ember Data -->\n<script src=\"http://builds.emberjs.com/canary/ember.min.js\"></script>\n<script src=\"http://builds.emberjs.com/canary/ember-data.min.js\"></script>\n\n<!-- Firebase -->\n<script src=\"https://cdn.firebase.com/js/client/1.0.17/firebase.js\"></script>\n\n<!-- EmberFire -->\n<script src=\"https://cdn.firebase.com/libs/emberfire/1.1.3/emberfire.min.js\"></script>\n```\n\nUse the URL above to download both the minified and non-minified versions of EmberFire from the Firebase CDN. You can also download them from the `/dist/` directory of this GitHub repository. [Firebase](https://www.firebase.com/docs/web-quickstart.html?utm_medium=web&utm_source=emberfire) and [Ember](http://emberjs.com/guides/getting-started/obtaining-emberjs-and-dependencies/) can be downloaded directly from their respective websites.\n\nYou can also install EmberFire via Bower and the dependencies will be downloaded automatically:\n\n```bash\n$ bower install emberfire --save\n```\n\n## Getting Started with Firebase\n\nEmberFire requires Firebase in order to sync data. You can [sign up here](https://www.firebase.com/docs/web-quickstart.html?utm_medium=web&utm_source=emberfire) for a free account.\n\n## Usage\n\nTo get started, simply create an instance of the\n`DS.FirebaseAdapter` in your app:\n\n```js\nApp.ApplicationAdapter = DS.FirebaseAdapter.extend({\n  firebase: new Firebase('https://<my-firebase>.firebaseio.com')\n});\n```\n\nYour Firebase data will now be synced with the Ember Data store\n\nYou can now interact with the data store as you normally would. For example,\ncalling `find()` with a specific ID will retrieve that record from Firebase.\nAdditionally, from that point on, every time that record is updated in Firebase,\nit will automatically be updated in the local data store.\n\nSee the [Ember documentation](http://emberjs.com/guides/models/) for a full\nlist of methods, including ways to create, find, delete and query records.\n\n#### Ember CLI\n\nEmberFire also works with the Ember CLI. Run the following command to add `emberfire.js` to your project:\n\n```bash\n$ npm install --save emberfire\n```\n\nThen, all you need to do is create `app/adapters/application.js` with the following content:\n\n```javascript\n/* globals Firebase */\n\nexport default DS.FirebaseAdapter.extend({\n  firebase: new Firebase('https://<my-firebase>.firebaseio.com')\n});\n```\n\n### Data Structure\n\nBy default, EmberFire will try to determine the correct Firebase reference based on the model name\n\n```javascript\n// Define a Post model\nApp.Post = DS.Model.extend();\n\n// Records will be fetched from to https://<my-firebase>.firebaseio.com/posts\nvar posts = store.findAll('post');\n\n// The new record will be saved to https://<my-firebase>.firebaseio.com/posts/post_id\nvar newPost = store.createRecord('post').save();\n```\n\n#### What if my data is named differently?\n\nIf you would like to customize where a model will be fetched/saved, simply create a model-specific adapter:\n\n```javascript\n// Define a Post model\nApp.Post = DS.Model.extend();\n\n// Define a Post adapter\nApp.PostAdapter = App.ApplicationAdapter.extend({\n  pathForType: function(type) {\n    return 'custom-posts';\n  }\n});\n```\n\nOverriding the `pathForType` method will allow you to tell the adapter where it should fetch/save records of the specified type\n\n```javascript\n// Records will now be fetched from to https://<my-firebase>.firebaseio.com/custom-posts\nvar posts = store.findAll('post');\n\n// The new record will now be saved to https://<my-firebase>.firebaseio.com/custom-posts/post_id\nvar newPost = store.createRecord('post').save();\n```\n\n### Relationships\n\nEmberFire can handle relationships in two different ways: async and embedded.\n\n#### Async\n\nAny relationship that is flagged as `async: true` tells the adapter to fetch\nthe record if it hasn't already been loaded\n\n```js\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment', { async: true })\n});\n\nApp.Comment = DS.Model.extend({\n  post: DS.belongsTo('post', { async: true })\n});\n```\n\nIn the `App.Post` example, comments will be fetched from\n`https://<my-firebase>.firebaseio.com/comments`\n\nHere is what the data structure would look in Firebase:\n\n```json\n{\n  \"posts\": {\n    \"post_id_1\": {\n      \"comments\": {\n        \"comment_id_1\": true\n      }\n    }\n  },\n\n  \"comments\": {\n    \"comment_id_1\": {\n      \"body\": \"This is a comment\",\n      \"post\": \"post_id_1\"\n    }\n  }\n}\n```\n\n**Note:** If your async data isn't autoloading, make sure you've defined your relationships in both directions.\n\n#### Embedded\n\nAny relationship that is flagged as `embedded: true` tells the adapter\nthat the related records have been included in the payload.\n\nGenerally, this approach is more complicated and not as widely used,\nbut it has been included to support existing data structures.\n\n##### hasMany\n\n```js\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment', { embedded: true })\n});\n```\n\nHere is what the data structure would look like in Firebase:\n\n```json\n{\n  \"posts\": {\n    \"post_id_1\": {\n      \"comments\": {\n        \"comment_id_1\": {\n          \"body\": \"This is a comment\"\n        }\n      }\n    }\n  }\n}\n```\n\n**Note:** When a model has embedded relationships, the related model should not be saved on its own.\n\n```js\nvar comment = store.createRecord('comment');\n// This WILL NOT save the comment inside of the post because the adapter doesn't know\n// where to save the comment without the context of the post\ncomment.save();\n```\n\nInstead, the comment needs to be added to the post\nand then the post can be saved\n\n```js\n// Add the new comment to the post and save it\npost.get('comments').addObject(comment);\n// Saving the post will save the embedded comments\npost.save()\n```\n\n##### belongsTo\n\nAny embedded `belongsTo` relationship must specifiy an id property in the payload\n\n```json\n{\n  \"posts\": {\n    \"post_id_1\": {\n      \"user\": {\n        \"id\": \"myusername\"\n      }\n    }\n  }\n}\n```\n\n## Contributing\n\nIf you'd like to contribute to EmberFire, you'll need to run the following commands to get your environment set up:\n\n```bash\n$ git clone https://github.com/firebase/emberfire.git\n$ cd emberfire          # go to the emberfire directory\n$ npm install -g grunt  # globally install grunt task runner\n$ npm install -g bower  # globally install Bower package manager\n$ npm install           # install local npm build / test dependencies\n$ bower install         # install local JavaScript dependencies\n$ grunt watch           # watch for source file changes\n```\n\n`grunt watch` will watch for changes in the `/src/` directory and lint, concatenate, and minify the source files and run the test suite when a change occurs. The output files - `emberfire.js` and `emberfire.min.js` - are written to the `/dist/` directory.\n\nYou can run the test suite by navigating to `file:///path/to/emberfire/test/index.html` or via the command line using `grunt test`.\n",
  "readmeFilename": "README.md",
  "_id": "emberfire@1.1.3",
  "dist": {
    "shasum": "8466a7bb814f75e59bdb017d36964d97cc4a4541"
  },
  "_from": "emberfire@",
  "_resolved": "https://registry.npmjs.org/emberfire/-/emberfire-1.1.3.tgz"
}
